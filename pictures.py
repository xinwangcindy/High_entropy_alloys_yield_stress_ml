from Tools import *
import scipy.misc

subtract_ys_test = False
increased_ys = False
scale_data = False
k_fold = True
input_pca = True

if subtract_ys_test and increased_ys:
    raise Exception('If you want to subtract the YS, the increased_ys should be False')
elif subtract_ys_test and scale_data:
    raise Exception('If you want to subtract the YS, the scale_data should be False')

data = Dataset(increased_ys=increased_ys, scale_data=scale_data)  # increased_ys=True

X, Y = data.get_pictures_data()

if input_pca:
    X, eigenvalues, eigen_vectors = pca_input(83, X)  # PCA as input
# In[]: Save images generated by PCA
    for num_sample, sample in enumerate(eigen_vectors):
        sample = np.reshape(sample, (256, 256))
        scipy.misc.imsave('pca_pictures/' + str(num_sample) + '.jpg', sample)

id_test = get_id_test(increased_ys, scale_data, input_pca=input_pca, comment='pictures')
plots = Plots(id_test, increased_ys=increased_ys)  # increased_ys=True

# Plot features with PCA(3 components)
# plots.pca_three_components(X, Y)

# Plot features with PCA(n components)
# plots.pca_ncomponents(X, Y, 2)

# Other techniques
# plots.unsupervised_models(X, Y)


class TrainModels:
    def __init__(self):
        self.KNR = None
        self.BRR = None
        self.DTR = None
        self.GBR = None
        self.KRR = None
        self.GPR = GaussianProcessRegressor(alpha=0.1, kernel=RationalQuadratic(alpha=1, length_scale=1))
        self.SVRe = None
        self.MLPR = None
        self.ABR = None


models = Models(X, Y, TrainModels(), subtract_ys=subtract_ys_test, k_fold=k_fold)
matrix_all_results, df_all_results, all_predictions = models.get_results()

# Yield Stress: % evaluation techniques
# plots.evaluation_techniques(matrix_all_results)

# Yield Stress: Known vs Predicted
if k_fold is not True:
    plots.ys_test_pred(all_predictions, models.testY, None)

print('R2=', matrix_all_results[:, 0])
print('MAE=', matrix_all_results[:, 4])
print('RMSE=', matrix_all_results[:, 3])
print('MAPE=', matrix_all_results[:, 7])
